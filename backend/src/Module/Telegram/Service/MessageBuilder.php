<?php
namespace App\Module\Telegram\Service;

use App\Entity\User;
use App\Module\Parser\Entity\ParseUrl;
use App\Service\Telegram\Keyboard\Keyboard;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\PersistentCollection;
use Longman\TelegramBot\Entities\InlineKeyboard;
use Longman\TelegramBot\Request;

class MessageBuilder
{
    public static function sendResultBySearchToUser(User $userBySearch, int $chatId)
    {
        $text = [];
        $text[] = "<b>{$userBySearch->getName()} {$userBySearch->getSurname()}</b>";
        $text[] = "<b><i>–í–æ–∑—Ä–∞—Å—Ç</i></b>: {$userBySearch->getAge()}";
        $text[] = "<b><i>–ü–æ–ª</i></b>: {$userBySearch->getGender()}";
        $text[] = "<b><i>–ì–æ—Ä–æ–¥</i></b>: {$userBySearch->getCity()}";
        $text[] = "<b><i>–û–ø–∏—Å–∞–Ω–∏–µ</i></b>: {$userBySearch->getAbout()}";
        $text = implode(PHP_EOL, $text);

        Request::sendPhoto([
            'chat_id' => $chatId,
            'photo'  => $userBySearch->getPhoto()
        ]);

        $likeButton = [];
        $likeButton['text'] = 'üëé';
        $likeButton['callback_data'] = json_encode(['type' => 'search', 'action' => 'dislike', 'userId' => $userBySearch->getId()]);

        $dislikeButton = [];
        $dislikeButton['text'] = 'üëçÔ∏è';
        $dislikeButton['callback_data'] = json_encode(['type' => 'search', 'action' => 'like', 'userId' => $userBySearch->getId()]);

        $keyboards = new InlineKeyboard(
            [
                $likeButton,
                $dislikeButton
            ],
        );

        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
            'reply_markup' =>  $keyboards,
        ]);
    }

    public static function sendNotFoundBySearch(int $chatId)
    {
        $text = [];
        $text[] = "<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
        ]);
    }


    public static function sendWelcomeMessage(int $chatId)
    {
        $text = [];
        $text[] = "<b>–î–æ–±—Ä—ã–π –¥–µ–Ω—å!</b>";
        $text[] = "<b>–í–∏–¥–∏–º–æ, —É –≤–∞—Å –≤—Å–µ –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è</b>";
        $text[] = "<b>–ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    public static function sendStartMessage(int $chatId)
    {
        $text = [];
        $text[] = "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>";
        $text[] = "<b>–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–Ω–∞—Ç—å –ø–µ—Ä–≤—ã–º –æ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö</b>";
        $text[] = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å</b>";
        $text[] = "<b>{{$chatId}}</b>";
//        $text[] = "<b>–ò –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –∏–∑ –∞–≤–∏—Ç–æ</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
            'reply_markup' =>  self::getKeyboard(),
        ]);
    }

    public static function sendAuthErrorMessage(int $chatId)
    {
        $text = [];
        $text[] = "<b>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    public static function sendMatchMessage(int $chatId, string $name, int $price, string $description, string $url)
    {
        $url = 'https://www.avito.ru'.$url;
        $text = [];
        $text[] = "<b>–í–∞–Ω–µ—á–µ–∫, –Ω–æ–≤—ã–π —É–ª–æ–≤</b>";
        $text[] = "<b></b>";
        $text[] = "<b><i>–ò–º—è</i></b>: {$name}";
        $text[] = "<b><i>–¶–µ–Ω–∞</i></b>: {$price}";
        $text[] = "<b><i>–û–ø–∏—Å–∞–Ω–∏–µ</i></b>: {$description}";
        $text[] = "<b><i>–°—Å—Å—ã–ª–∫–∞:</i></b>: {$url}";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    public static function sendMessageBeforeAddingLink(int $chatId)
    {
        $text = [];
        $text[] = "<b>–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å—Ç—Ä</b>";
        $text[] = "<b>–ü—Ä–∏–º–µ—Ä</b>";
        $text[] = "<b><i>https://www.avito.ru/stavropol/avtomobili/s_probegom/hyundai/accent/avtomat-ASgBAQICA0SGFMjmAeC2DaKb‚Ä¶</i></b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    public static function sendMessageAfterAddingLink(int $chatId)
    {
        $text = [];
        $text[] = "<b>–§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    public static function getKeyboard()
    {
        return new \Longman\TelegramBot\Entities\Keyboard(
            ["üîí –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É" , "üìì –ú–æ–∏ —Å—Å—ã–ª–∫–∏"],
//            ["üìì –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", "üìñ –û —Å–µ—Ä–≤–∏—Å–µ	"],
        );
    }

    public static function sendAllLinksUser(int $chatId, Collection $links)
    {
        foreach ($links->toArray() as $link) {
            $text = [];
            $text[] = "<b><i>Id:</i></b>: {$link->getId()}";
            $text[] = "<b><i>–ò—Å—Ç–æ—á–Ω–∏–∫</i></b>: {$link->getSource()}";
            $text[] = "<b><i>–°—Å—ã–ª–∫–∞</i></b>: {$link->getUrl()}";
            $text = implode(PHP_EOL, $text);

            $likeButton = [];
            $likeButton['text'] = '–£–¥–∞–ª–∏—Ç—å';
            $likeButton['callback_data'] = json_encode(['type' => 'link', 'action' => 'delete', 'linkId' => $link->getId()]);

//            $dislikeButton = [];
//            $dislikeButton['text'] = 'üëçÔ∏è';
//            $dislikeButton['callback_data'] = json_encode(['type' => 'search', 'action' => 'like', 'userId' => $userBySearch->getId()]);

            $keyboards = new InlineKeyboard(
                [
                    $likeButton,
//                    $dislikeButton
                ],
            );

            Request::sendMessage([
                'chat_id' => $chatId,
                'text' => $text,
                'parse_mode' => 'HTML',
                'reply_markup' => $keyboards,
            ]);
        }
    }

}