<?php
namespace App\Module\Telegram\Service;

use App\Module\Parser\Entity\ParseUrl;
use App\Module\Telegram\Entity\TelegramUser;
use Doctrine\Common\Collections\Collection;
use Longman\TelegramBot\Entities\InlineKeyboard;
use Longman\TelegramBot\Entities\Keyboard;
use Longman\TelegramBot\Request;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;

class MessageBuilder
{

    public function __construct(
        protected UrlGeneratorInterface $router
    )
    {
    }

    public static function sendWelcomeMessage(int $chatId)
    {
        $text = [];
        $text[] = "<b>üçÄ –î–æ–±—Ä—ã–π –¥–µ–Ω—å! üçÄ</b>";
        $text[] = "ü§ñ <b>bi bi-–±–æ—Ç</b> - –ø–æ–º–æ–∂–µ—Ç –ø–µ—Ä–≤—ã–º —É–∑–Ω–∞—Ç—å –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –º–∞—à–∏–Ω—ã!";
        $text[] = "üñ• –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º üñ•</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
            'reply_markup' => self::getKeyboardNotAuth(),
        ]);
    }

    public static function sendStartMessage(int $chatId)
    {
        $text = [];
        $text[] = "üöó <b>bi bi-–±–æ—Ç</b> ‚Äî –ø–æ–º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å –≤–∞–º –ø–µ—Ä–≤—ã–º –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –º–∞—à–∏–Ω—ã!";
        $text[] = "";
        $text[] = '<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b> –≤—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Å—Å—ã–ª–∫—É-—Ñ–∏–ª—å—Ç—Ä —Å –Ω—É–∂–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ, –∞ –∑–∞—Ç–µ–º –±–æ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –≤–∞—Å, –∫–æ–≥–¥–∞ –≤ —ç—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–µ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.';
        $text[] = '';
        $text[] = '<b>‚ùóÔ∏è–°–ø–µ—à–∏—Ç–µ, —Ç–∞–∫ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –≤ –±–æ—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ ‚ùóÔ∏è</b>Ô∏è';
        $text[] = "";
        $text[] = "‚úÖ –ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ ¬´–ê–≤–∏—Ç–æ¬ª —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π <b>–Ω–µ –±–æ–ª–µ–µ 1‚Äì2 –º–∏–Ω—É—Ç</b> –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ.";
        $text[] = "";
        $text[] = "‚úÖ –ë–æ—Ç —á–∞—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ <b>–¥–æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b> –Ω–∞ ¬´–ê–≤–∏—Ç–æ¬ª, –ø–æ—ç—Ç–æ–º—É –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –µ–≥–æ —É–≤–∏–¥–∏—Ç.";
        $text[] = "";
        $text[] = "‚úÖ –ë–æ—Ç—ã/—Å–∞–π—Ç—ã —Å –ø–æ–¥–æ–±–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∏–º–µ—é—Ç <b>–∑–∞–¥–µ—Ä–∂–∫—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ (–∞ –∏–Ω–æ–≥–¥–∞ –∏ –≤ –¥–µ—Å—è—Ç–∫–∏) —Ä–∞–∑ –±–æ–ª—å—à–µ</b>, —á–µ–º –Ω–∞—à –±–æ—Ç.";
        $text[] = "";
        $text[] = "‚úÖ –í —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ –±–æ—Ç–∞ <b>–Ω–µ—Ç –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ</b> ‚Äî —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.";
        $text[] = "";
        $text[] = 'üìπ <b><a href="https://www.youtube.com/watch?v=Jz6nQDvnXUM&t=35s"> –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</a></b>';
        $text[] = 'üí¨ <b><a href="https://trite-jackrabbit-ce3.notion.site/bibi-839950d75f7c49efaf7ef1aef1347e30">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</a></b>';
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
            'reply_markup' => self::getKeyboardAuth(),
        ]);
    }

    public static function sendAboutTrialMode(int $chatId)
    {
        $text = [];
        $text[] = "<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º –±–æ—Ç–∞</b>";
        $text[] = "";
        $text[] = "‚ö†Ô∏è –í–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ <b>1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ 2 –¥–Ω—è</b> –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç";
        $text[] = "";
        $text = implode(PHP_EOL, $text);

        $startTrialButton = [];
        $startTrialButton['text'] = '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–µ–º–æ-—Ä–µ–∂–∏–º';
        $startTrialButton['callback_data'] = json_encode(['type' => 'trial', 'action' => 'start']);


        $keyboards = new InlineKeyboard(
            [
                $startTrialButton,
            ],
        );


        Request::sendMessage([
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
            'reply_markup' => $keyboards,
        ]);
    }

    public static function sendTrialAlreadyActivated(int $chatId)
    {
        $text = [];
        $text[] = "üëã <b>–í—ã —É–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –¥–µ–º–æ —Ä–µ–∂–∏–º–æ–º!</b>";
        $text[] = "";
        $text[] = "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞";

        $text = implode(PHP_EOL, $text);

//        $startTrialButton = [];
//        $startTrialButton['text'] = 'üí∏ –ü–æ–¥–ø–∏—Å–∫–∞';
//
//
//        $keyboards = new InlineKeyboard(
//            [
//                $startTrialButton,
//            ],
//        );

//        $keyboards = [];

        // Simple digits
//        $keyboards = new Keyboard(
//            ['üí∏ –ü–æ–¥–ø–∏—Å–∫–∞'],
//        );

//        $keyboards->setResizeKeyboard(true);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
//            'reply_markup' =>  $keyboards,
        ]);
    }

    public static function sendTrialActivated(int $chatId)
    {
        $text = [];
        $text[] = "üëã <b>–û—Ç–ª–∏—á–Ω–æ!</b>";
        $text[] = "";
        $text[] = "–î–µ–º–æ —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—à–∏–Ω";
        $text[] = "–ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞, —Ç–æ –≤–æ—Ç –≤–∞–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ–µ –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å";
        $text[] = "";
        $text[] = 'üìπ <b><a href="https://www.youtube.com/watch?v=Jz6nQDvnXUM&t=35s"> –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</a></b>';
        $text[] = 'üí¨ <b><a href="https://trite-jackrabbit-ce3.notion.site/bibi-839950d75f7c49efaf7ef1aef1347e30">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</a></b>';
        $text[] = "";
        $text[] = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É";

        $text = implode(PHP_EOL, $text);

        $startTrialButton = [];
        $startTrialButton['text'] = 'üîí –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É';
        $startTrialButton['callback_data'] = json_encode(['type' => 'menu', 'action' => 'add-link']);


        $keyboards = new InlineKeyboard(
            [
                $startTrialButton,
            ],
        );


        Request::sendMessage([
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
            'reply_markup' => $keyboards,
        ]);
    }

    public static function sendAuthErrorMessage(int $chatId)
    {
        $text = [];
        $text[] = "<b>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    public static function sendMatchMessage(
        int     $chatId,
        string  $name,
        int     $price,
        string  $description,
        string  $url,
        string  $baseUrl,
        ?string $filterName,
        string  $city,
        string  $image,
    )
    {
//        Request::sendPhoto([
//            'chat_id' => $chatId,
//            'photo'   => $image,
//        ]);
        $priceFormated = number_format($price, 0, '.', ' ');
        $url = 'https://www.avito.ru' . $url;
        $text = [];
        $text[] = "<b>üö®–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µüö®</b>";
        $text[] = "";
        $text[] = "üöó<b>–ò–º—è</b>: {$name}";
        $text[] = "üí∞<b>–¶–µ–Ω–∞</b>: {$priceFormated}";
        $text[] = "üìñ<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {$description}";
        $text[] = "üåÜ<b>–ì–æ—Ä–æ–¥</b>: {$city}";
        if ($filterName) {
            $text[] = "üìÅ<b>–ò–º—è —Ñ–∏–ª—å—Ç—Ä–∞</b>: {$filterName}";
        }
        $text[] = '<a href="' . $image . '">–§–æ—Ç–æ</a>';
        $text = implode(PHP_EOL, $text);

        $ad = [];
        $ad['text'] = '–û–±—ä—è–≤–ª–µ–Ω–∏–µ üöò';
        $ad['url'] = $url;

        $filter = [];
        $filter['text'] = '–§–∏–ª—å—Ç—Ä üõ†';
        $filter['url'] = $baseUrl;


        $keyboards = new InlineKeyboard(
            [
                $ad,
                $filter
            ],
        );


        Request::sendMessage([
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
            'reply_markup' => $keyboards,
        ]);

    }

    public static function sendMessageBeforeAddingLink(int $chatId)
    {
        $text = [];
        $text[] = "<b>–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å—Ç—Ä</b>";
        $text[] = "<b>–ü—Ä–∏–º–µ—Ä</b>";
        $text[] = "<b><i>https://www.avito.ru/stavropol/avtomobili/s_probegom/hyundai/accent/avtomat-ASgBAQICA0SGFMjmAeC2DaKb‚Ä¶</i></b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    public static function sendMessageAfterAddingLink(int $chatId)
    {
        $text = [];
        $text[] = "<b>–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞, —á—Ç–æ–±—ã –µ–≥–æ –ø—Ä–æ—â–µ –±—ã–ª–æ –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    public static function sendMessageAfterSavingLink(int $chatId)
    {
        $text = [];
        $text[] = "<b>–§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    public static function sendMessageError(int $chatId)
    {
        $text = [];
        $text[] = "<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    public static function getKeyboardAuth()
    {
        return (new \Longman\TelegramBot\Entities\Keyboard(
            ["üîí –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", "üìì –ú–æ–∏ —Å—Å—ã–ª–∫–∏"],
            ["üí∏ –ü–æ–¥–ø–∏—Å–∫–∞"],
        ))->setResizeKeyboard(true);
    }

    public static function getKeyboardNotAuth()
    {
        return (new \Longman\TelegramBot\Entities\Keyboard(
            ["üí∏ –ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"],
        ))->setResizeKeyboard(true);
    }

    public static function sendAllLinksUser(int $chatId, Collection $links)
    {
        if (count($links->toArray()) === 0) {
            $text = [];
            $text[] = "<b>–£ –≤–∞—Å –Ω–µ—Ç —Å—Å—ã–ª–æ–∫</b>";
            $text = implode(PHP_EOL, $text);
            Request::sendMessage([
                'chat_id' => $chatId,
                'text' => $text,
                'parse_mode' => 'HTML',
            ]);
        }

        /** @var ParseUrl $link */
        foreach ($links->toArray() as $link) {
            $text = [];
            $text[] = "<b>Id</b>: {$link->getId()}";
            $text[] = "<b>–ò—Å—Ç–æ—á–Ω–∏–∫</b>: {$link->getSource()}";
            $text[] = "<b>–ò–º—è —Ñ–∏–ª—å—Ç—Ä–∞</b>: {$link->getName()}";
            $text = implode(PHP_EOL, $text);

            $deleteButton = [];
            $deleteButton['text'] = '–£–¥–∞–ª–∏—Ç—å ‚ùå';
            $deleteButton['callback_data'] = json_encode(['type' => 'link', 'action' => 'delete', 'linkId' => $link->getId()]);

            $linkButton = [];
            $linkButton['text'] = '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∏–ª—å—Ç—Ä üõ†';
            $linkButton['url'] = $link->getUrl();

            $keyboards = new InlineKeyboard(
                [
                    $deleteButton,
                    $linkButton
                ],
            );

            Request::sendMessage([
                'chat_id' => $chatId,
                'text' => $text,
                'parse_mode' => 'HTML',
                'reply_markup' => $keyboards,
            ]);
        }
    }

    public static function sendMessageLinkDelete(int $chatId)
    {
        $text = [];
        $text[] = "<b>–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    public function aboutSubscribe(TelegramUser $user)
    {
        $text = [];
        $text[] = "<b>‚åõÔ∏è–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏‚åõÔ∏è</b>";
        $text[] = "";
        $text[] = "<b>–ö–∞–∫–∏–µ –≤–∏–¥—ã –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å—Ç—å?</b>";
        $text[] = "üî• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –Ω–µ–¥–µ–ª—é - <b>390 —Ä—É–±–ª–µ–π</b>";
        $text[] = "üî• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ - <b>590 —Ä—É–±–ª–µ–π</b>";
        $text[] = "üî• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü - <b>890 —Ä—É–±–ª–µ–π</b>";
        $text[] = "–í–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ <b>5 —Å—Å—ã–ª–æ–∫</b> –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω";
        $text = implode(PHP_EOL, $text);

        $oneWeek = [];
        $oneWeek['text'] = '–ö—É–ø–∏—Ç—å 1 –Ω–µ–¥–µ–ª—é';
        $oneWeek['url'] = $_ENV['BASE_URL'] . $this->router->generate('payment_create', [
                'userId' => $user->getId(),
                'subscriptionType' => 2
            ]);

        $twoWeek = [];
        $twoWeek['text'] = '–ö—É–ø–∏—Ç—å 2 –Ω–µ–¥–µ–ª–∏';
        $twoWeek['url'] = $_ENV['BASE_URL'] . $this->router->generate('payment_create', [
                'userId' => $user->getId(),
                'subscriptionType' => 3
            ]);

        $oneMonth = [];
        $oneMonth['text'] = '–ö—É–ø–∏—Ç—å 1 –º–µ—Å—è—Ü';
        $oneMonth['url'] = $_ENV['BASE_URL'] . $this->router->generate('payment_create', [
                'userId' => $user->getId(),
                'subscriptionType' => 4
            ]);


        $keyboards = new InlineKeyboard(
            [
                $oneWeek,
                $twoWeek,
                $oneMonth
            ],
        );


        Request::sendMessage([
            'chat_id' => $user->getChatId(),
            'text' => $text,
            'parse_mode' => 'HTML',
            'reply_markup' => $keyboards
        ]);
    }

    public function alreadyHasSubscription(TelegramUser $user)
    {
        $text = [];
        $keyboards = [];
        if ($user->hasUserTrial()) {
            $text[] = "<b>‚åõÔ∏è–£ –≤–∞—Å –¥–µ–º–æ-—Ä–µ–∂–∏–º ‚åõÔ∏è</b>";
        }
        if ($user->hasUserStandart()) {
            $text[] = "<b>‚åõÔ∏è–£ –≤–∞—Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞‚åõÔ∏è</b>";
        }
        $text[] = '';
        $interval = (new \DateTimeImmutable())->diff($user->getSubscribe()->last()->getActivatedTo());
        $amountDays = $interval->format('%a');
        if ((int)$amountDays === 0) {
            $text[] = "–°–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏";
        } else {
            $text[] = "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{$amountDays}</b>";
        }

        if ((int)$amountDays === 0 || $user->hasUserTrial()) {
            $text[] = '';
            $text[] = "<b>–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?</b>";
            $text[] = "üî• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –Ω–µ–¥–µ–ª—é - <b>390 —Ä—É–±–ª–µ–π</b>";
            $text[] = "üî• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ - <b>590 —Ä—É–±–ª–µ–π</b>";
            $text[] = "üî• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü - <b>890 —Ä—É–±–ª–µ–π</b>";
            $text[] = "–í–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ <b>5 —Å—Å—ã–ª–æ–∫</b> –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω";

            $oneWeek = [];
            $oneWeek['text'] = '–ö—É–ø–∏—Ç—å 1 –Ω–µ–¥–µ–ª—é';
            $oneWeek['url'] = $_ENV['BASE_URL'] . $this->router->generate('payment_create', [
                    'userId' => $user->getId(),
                    'subscriptionType' => 2
                ]);

            $twoWeek = [];
            $twoWeek['text'] = '–ö—É–ø–∏—Ç—å 2 –Ω–µ–¥–µ–ª–∏';
            $twoWeek['url'] = $_ENV['BASE_URL'] . $this->router->generate('payment_create', [
                    'userId' => $user->getId(),
                    'subscriptionType' => 3
                ]);

            $oneMonth = [];
            $oneMonth['text'] = '–ö—É–ø–∏—Ç—å 1 –º–µ—Å—è—Ü';
            $oneMonth['url'] = $_ENV['BASE_URL'] . $this->router->generate('payment_create', [
                    'userId' => $user->getId(),
                    'subscriptionType' => 4
                ]);


            $keyboards = new InlineKeyboard(
                [
                    $oneWeek,
                    $twoWeek,
                    $oneMonth
                ],
            );
        }

        $text = implode(PHP_EOL, $text);

        $response = [
            'chat_id' => $user->getChatId(),
            'text' => $text,
            'parse_mode' => 'HTML',
        ];

        if (!empty($keyboards)) {
            $response['reply_markup'] = $keyboards;
        }
        Request::sendMessage($response);
    }

    public static function maxAmountLinks(int $chatId)
    {
        $text = [];
        $text[] = "üëã <b>–£ –≤–∞—Å –ª–∏–º–∏—Ç –ø–æ —Å—Å—ã–ª–∫–∞–º!</b>";
        $text[] = "";
        $text[] = "–ï—Å–ª–∏ —É –≤–∞—Å –¥–µ–º–æ —Ä–µ–∂–∏–º, —Ç–æ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –±–æ–ª—å—à–µ —Å—Å—ã–ª–æ–∫";

        $text = implode(PHP_EOL, $text);

        $startTrialButton = [];
        $startTrialButton['text'] = 'üí∏ –ü–æ–¥–ø–∏—Å–∫–∞';
        $startTrialButton['callback_data'] = json_encode(['type' => 'menu', 'action' => 'subscription']);


        $keyboards = new InlineKeyboard(
            [
                $startTrialButton,
            ],
        );


        Request::sendMessage([
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
            'reply_markup' => $keyboards,
        ]);
    }

    public static function wrongLink(int $chatId)
    {
        $text = [];
        $text[] = "üëã <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞!</b>";
        $text[] = "";
        $text[] = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –∏–∑ –∞–≤–∏—Ç–æ?";
        $text[] = "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑";

        $startTrialButton = [];
        $startTrialButton['text'] = 'üîí –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É';
        $startTrialButton['callback_data'] = json_encode(['type' => 'menu', 'action' => 'add-link']);


        $keyboards = new InlineKeyboard(
            [
                $startTrialButton,
            ],
        );

        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
            'reply_markup' => $keyboards
        ]);
    }

    public static function subscriptionActivated(TelegramUser $telegramUser, int $subscriptionType)
    {
        $text = [];
        $text[] = "üëã <b>–û—Ç–ª–∏—á–Ω–æ!</b>";
        $text[] = "";
        if ($subscriptionType == 2) {
            $text[] = "–í—ã –∫—É–ø–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –Ω–µ–¥–µ–ª—é";
        } elseif ($subscriptionType == 3) {
            $text[] = "–í—ã –∫—É–ø–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏";
        } elseif ($subscriptionType == 4) {
            $text[] = "–í—ã –∫—É–ø–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü";
        }
        $text[] = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É";

        $text = implode(PHP_EOL, $text);

        $startTrialButton = [];
        $startTrialButton['text'] = 'üîí –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É';
        $startTrialButton['callback_data'] = json_encode(['type' => 'menu', 'action' => 'add-link']);


        $keyboards = new InlineKeyboard(
            [
                $startTrialButton,
            ],
        );


        Request::sendMessage([
            'chat_id' => $telegramUser->getChatId(),
            'text'    => $text,
            'parse_mode' => 'HTML',
            'reply_markup' =>  $keyboards,
        ]);
    }


}