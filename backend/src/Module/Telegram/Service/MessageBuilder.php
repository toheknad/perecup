<?php
namespace App\Module\Telegram\Service;

use App\Entity\User;
use App\Module\Parser\Entity\ParseUrl;
use App\Service\Telegram\Keyboard\Keyboard;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\PersistentCollection;
use Longman\TelegramBot\Entities\InlineKeyboard;
use Longman\TelegramBot\Request;

class MessageBuilder
{

    public static function sendWelcomeMessage(int $chatId)
    {
        $text = [];
        $text[] = "<b>–î–æ–±—Ä—ã–π –¥–µ–Ω—å!</b>";
        $text[] = "<b>–í–∏–¥–∏–º–æ, —É –≤–∞—Å –≤—Å–µ –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è</b>";
        $text[] = "<b>–ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    public static function sendStartMessage(int $chatId)
    {
        $text = [];
        $text[] = "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>";
        $text[] = "<b>–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–Ω–∞—Ç—å –ø–µ—Ä–≤—ã–º –æ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö</b>";
        $text[] = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å</b>";
        $text[] = "<b>{{$chatId}}</b>";
//        $text[] = "<b>–ò –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –∏–∑ –∞–≤–∏—Ç–æ</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
            'reply_markup' =>  self::getKeyboard(),
        ]);
    }

    public static function sendAuthErrorMessage(int $chatId)
    {
        $text = [];
        $text[] = "<b>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    public static function sendMatchMessage(
        int $chatId,
        string $name,
        int $price,
        string $description,
        string $url,
        string $baseUrl,
        ?string $filterName,
        string $city
    )
    {
        $url = 'https://www.avito.ru'.$url;
        $text = [];
        $text[] = "<b>üö®–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µüö®</b>";
        $text[] = "";
        $text[] = "üöó<b>–ò–º—è</b>: {$name}";
        $text[] = "üí∞<b>–¶–µ–Ω–∞</b>: {$price}";
        $text[] = "üìñ<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {$description}";
        $text[] = "üåÜ<b>–ì–æ—Ä–æ–¥</b>: {$city}";
        if ($filterName) {
            $text[] = "üìÅ<b>–ò–º—è —Ñ–∏–ª—å—Ç—Ä–∞</b>: {$filterName}";
        }
        $text = implode(PHP_EOL, $text);

        $ad = [];
        $ad['text'] = '–û–±—ä—è–≤–ª–µ–Ω–∏–µ üöò';
        $ad['url'] = $url;

        $filter = [];
        $filter['text'] = '–§–∏–ª—å—Ç—Ä üõ†';
        $filter['url'] = $baseUrl;


        $keyboards = new InlineKeyboard(
            [
                $ad,
                $filter
            ],
        );


        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
            'reply_markup' => $keyboards,
        ]);
    }

    public static function sendMessageBeforeAddingLink(int $chatId)
    {
        $text = [];
        $text[] = "<b>–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å—Ç—Ä</b>";
        $text[] = "<b>–ü—Ä–∏–º–µ—Ä</b>";
        $text[] = "<b><i>https://www.avito.ru/stavropol/avtomobili/s_probegom/hyundai/accent/avtomat-ASgBAQICA0SGFMjmAeC2DaKb‚Ä¶</i></b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    public static function sendMessageAfterAddingLink(int $chatId)
    {
        $text = [];
        $text[] = "<b>–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞, —á—Ç–æ–±—ã –µ–≥–æ –ø—Ä–æ—â–µ –±—ã–ª–æ –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    public static function sendMessageAfterSavingLink(int $chatId)
    {
        $text = [];
        $text[] = "<b>–§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
        ]);
    }
    public static function sendMessageError(int $chatId)
    {
        $text = [];
        $text[] = "<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    public static function getKeyboard()
    {
        return new \Longman\TelegramBot\Entities\Keyboard(
            ["üîí –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É" , "üìì –ú–æ–∏ —Å—Å—ã–ª–∫–∏"],
            ["üí∏ –ü–æ–¥–ø–∏—Å–∫–∞"],
        );
    }

    public static function sendAllLinksUser(int $chatId, Collection $links)
    {
        if (count($links->toArray()) === 0) {
            $text = [];
            $text[] = "<b>–£ –≤–∞—Å –Ω–µ—Ç —Å—Å—ã–ª–æ–∫</b>";
            $text = implode(PHP_EOL, $text);
            Request::sendMessage([
                'chat_id' => $chatId,
                'text' => $text,
                'parse_mode' => 'HTML',
            ]);
        }

        /** @var ParseUrl $link */
        foreach ($links->toArray() as $link) {
            $text = [];
            $text[] = "<b>Id</b>: {$link->getId()}";
            $text[] = "<b>–ò—Å—Ç–æ—á–Ω–∏–∫</b>: {$link->getSource()}";
            $text[] = "<b>–ò–º—è —Ñ–∏–ª—å—Ç—Ä–∞</b>: {$link->getName()}";
            $text = implode(PHP_EOL, $text);

            $deleteButton = [];
            $deleteButton['text'] = '–£–¥–∞–ª–∏—Ç—å ‚ùå';
            $deleteButton['callback_data'] = json_encode(['type' => 'link', 'action' => 'delete', 'linkId' => $link->getId()]);

            $linkButton = [];
            $linkButton['text'] = '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∏–ª—å—Ç—Ä üõ†';
            $linkButton['url'] = $link->getUrl();

            $keyboards = new InlineKeyboard(
                [
                    $deleteButton,
                    $linkButton
                ],
            );

            Request::sendMessage([
                'chat_id' => $chatId,
                'text' => $text,
                'parse_mode' => 'HTML',
                'reply_markup' => $keyboards,
            ]);
        }
    }

    public static function sendMessageLinkDelete(int $chatId)
    {
        $text = [];
        $text[] = "<b>–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    public static function sendSubscribeMessage(int $chatId)
    {
        $text = [];
        $text[] = "<b>‚åõÔ∏è–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏‚åõÔ∏è</b>";
        $text[] = "<b>–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –µ–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ</b>";
        $text[] = "<b>–æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–æ—Ç–µ</b>";
        $text[] = "<b>–ö–æ–Ω—Ç–∞–∫—Ç: @ivan_shuga</b>";
        $text = implode(PHP_EOL, $text);


        Request::sendMessage([
            'chat_id' => $chatId,
            'text'    => $text,
            'parse_mode' => 'HTML',
        ]);
    }

}